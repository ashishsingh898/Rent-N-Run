// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace RentNRunLib
{
    public partial class CarrentContext : DbContext
    {
        public CarrentContext()
        {
        }

        public CarrentContext(DbContextOptions<CarrentContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Car> Cars { get; set; }
        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<Contactus> Contactus { get; set; }
        public virtual DbSet<Feedback> Feedbacks { get; set; }
        public virtual DbSet<Signin> Signins { get; set; }
        public virtual DbSet<Signup> Signups { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=LAPTOP-SPH65KIE\\SQLEXPRESS;Initial Catalog=CAR_RENT;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Booking>(entity =>
            {
                entity.HasKey(e => e.RentId)
                    .HasName("PK__BOOKING__76A8EE5522662F17");

                entity.ToTable("BOOKING");

                entity.Property(e => e.RentId).HasColumnName("RENT_ID");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.CarId).HasColumnName("CAR_ID");

                entity.Property(e => e.Email)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.FromDate)
                    .HasColumnType("date")
                    .HasColumnName("FROM_DATE");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("date")
                    .HasColumnName("ORDER_DATE");

                entity.Property(e => e.ReturnDate)
                    .HasColumnType("date")
                    .HasColumnName("RETURN_DATE");

                entity.HasOne(d => d.Car)
                    .WithMany(p => p.Bookings)
                    .HasForeignKey(d => d.CarId)
                    .HasConstraintName("FK__BOOKING__CAR_ID__2CF2ADDF");

                entity.HasOne(d => d.EmailNavigation)
                    .WithMany(p => p.Bookings)
                    .HasForeignKey(d => d.Email)
                    .HasConstraintName("FK__BOOKING__EMAIL__2DE6D218");
            });

            modelBuilder.Entity<Car>(entity =>
            {
                entity.ToTable("CAR");

                entity.Property(e => e.CarId)
                    .ValueGeneratedNever()
                    .HasColumnName("CAR_ID");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COLOR");

                entity.Property(e => e.DailyRent).HasColumnName("DAILY_RENT");

                entity.Property(e => e.Images)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IMAGES");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MODEL");

                entity.Property(e => e.ModelYear).HasColumnName("MODEL_YEAR");

                entity.Property(e => e.NumberOfPersons).HasColumnName("NUMBER_OF_PERSONS");
            });

            modelBuilder.Entity<Cart>(entity =>
            {
                entity.HasKey(e => e.RentId)
                    .HasName("PK__CART__76A8EE559A79E87C");

                entity.ToTable("CART");

                entity.Property(e => e.RentId).HasColumnName("RENT_ID");

                entity.Property(e => e.CarId).HasColumnName("CAR_ID");

                entity.Property(e => e.Email)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.HasOne(d => d.Car)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.CarId)
                    .HasConstraintName("FK__CART__CAR_ID__10566F31");

               
            });

            modelBuilder.Entity<Contactus>(entity =>
            {
                entity.HasKey(e => e.ContactusId)
                    .HasName("PK__CONTACTU__83191CE97B07D3FB");

                entity.ToTable("CONTACTUS");

                entity.Property(e => e.ContactusId).HasColumnName("CONTACTUS_ID");

                entity.Property(e => e.Email)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Message)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MESSAGE");

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Subjects)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SUBJECTS");

                entity.HasOne(d => d.EmailNavigation)
                    .WithMany(p => p.Contactus)
                    .HasForeignKey(d => d.Email)
                    .HasConstraintName("FK__CONTACTUS__EMAIL__7D439ABD");
            });

            modelBuilder.Entity<Feedback>(entity =>
            {
                entity.ToTable("feedback");

                entity.Property(e => e.Feedbackid).HasColumnName("feedbackid");

                entity.Property(e => e.Mailid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("mailid");

                entity.Property(e => e.Msg)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("msg");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Signin>(entity =>
            {
                entity.HasKey(e => e.LoginId)
                    .HasName("PK__SIGNIN__476A024DBE66F1B2");

                entity.ToTable("SIGNIN");

                entity.Property(e => e.LoginId).HasColumnName("LOGIN_ID");

                entity.Property(e => e.Email)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Password)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PASSWORD");

                entity.HasOne(d => d.EmailNavigation)
                    .WithMany(p => p.Signins)
                    .HasForeignKey(d => d.Email)
                    .HasConstraintName("FK__SIGNIN__EMAIL__71D1E811");
            });

            modelBuilder.Entity<Signup>(entity =>
            {
                entity.HasKey(e => e.Email)
                    .HasName("PK__SIGNUP__161CF725FED3F78E");

                entity.ToTable("SIGNUP");

                entity.Property(e => e.Email)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.City)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.ContactNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_NUMBER")
                    .IsFixedLength();

                entity.Property(e => e.CustomerId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.DateOfBirth)
                    .HasColumnType("date")
                    .HasColumnName("DATE_OF_BIRTH");

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Password)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PASSWORD");

                entity.Property(e => e.State)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.Zipcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ZIPCODE");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}